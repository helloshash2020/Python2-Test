import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

class MyHandler(FileSystemEventHandler):
    def on_any_event(self, event):
        if event.is_directory:
            return
        elif event.event_type in ('created', 'modified'):
            print(f"File {event.src_path} {event.event_type}")
            process_file(event.src_path)

def process_file(file_path):
    # Implement your custom logic here to process the file
    print(f"Processing file: {file_path}")

path = "/path/to/your/directory"  # Replace with the directory you want to watch

event_handler = MyHandler()
observer = Observer()
observer.schedule(event_handler, path, recursive=False)
observer.start()

try:
    while True:
        time.sleep(1)  # Run the script every second
except KeyboardInterrupt:
    observer.stop()

observer.join()


new

import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

class MyHandler(FileSystemEventHandler):
    def on_any_event(self, event):
        if event.is_directory:
            return
        elif event.event_type in ('created', 'modified'):
            print(f"File {event.src_path} {event.event_type}")
            process_file(event.src_path)

def process_file(file_path):
    # Implement your custom logic here to process the file
    print(f"Processing file: {file_path}")

if __name__ == "__main":
    path = "/path/to/your/directory"  # Replace with the directory you want to watch

    event_handler = MyHandler()
    observer = Observer()
    observer.schedule(event_handler, path, recursive=False)
    observer.start()

    try:
        while True:
            time.sleep(1)  # Run the script every second
    except KeyboardInterrupt:
        observer.stop()

    observer.join()


